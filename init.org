#+PROPERTY: header-args :tangle init.el :results none
#+STARTUP: content

* Early init
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

* Elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
    			      :ref nil :depth 1
    			      :files (:defaults "elpaca-test.el" (:exclude "extensions"))
    			      :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
    	(if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
    		 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
    						 ,@(when-let ((depth (plist-get order :depth)))
    						     (list (format "--depth=%d" depth) "--no-single-branch"))
    						 ,(plist-get order :repo) ,repo))))
    		 ((zerop (call-process "git" nil buffer t "checkout"
    				       (or (plist-get order :ref) "--"))))
    		 (emacs (concat invocation-directory invocation-name))
    		 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
    				       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
    		 ((require 'elpaca))
    		 ((elpaca-generate-autoloads "elpaca" repo)))
    	    (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    	  (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  ;; You could embed this code directly in the reicpe, I just abstracted it into a function.
  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                         elpaca--pre-built-steps elpaca-build-steps))
            (list '+elpaca-unload-seq 'elpaca--activate-package)))

  (elpaca `(seq :build ,(+elpaca-seq-build-steps)))

  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))
#+end_src

** Use package
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

* General
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer leader-def
      :keymaps '(normal insert visual)
      :prefix "SPC"
      :global-prefix "C-SPC"))
#+end_src
* Basic config
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+end_src

** Shortcut to this file
#+begin_src emacs-lisp
  (defun sergio/open-init-org-file ()
    (interactive)
    (find-file "~/Documents/src/new_configuration/init.org"))

  (global-set-key (kbd "C-c e e") 'sergio/open-init-org-file)
  (leader-def "e e" 'sergio/open-init-org-file)
#+end_src

** Recent files
#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

** Projects
#+begin_src emacs-lisp
(use-package project
  :ensure nil
  :config
  (defun sergio/project-rg ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (consult-ripgrep default-directory)))
  (define-key project-prefix-map "r" 'sergio/project-rg)
  (add-to-list 'project-switch-commands (list 'sergio/project-rg "Ripgrep"))

  (setq project-switch-commands (remove '(project-vc-dir "VC-Dir") project-switch-commands))

  (defun sergio/project-magit ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (magit-status)))
  (define-key project-prefix-map "m" 'sergio/project-magit)
  (add-to-list 'project-switch-commands (list 'sergio/project-magit "Magit"))

  (setq project-find-functions (list #'project-try-vc))
  (add-to-list 'project-switch-commands (list 'project-switch-to-buffer "List buffers"))
  (defun sergio/project-add-variable ()
	(interactive)
	"Add dir variable to the main project directory."
	(let ((default-directory (project-root (project-current))))
	  (call-interactively 'add-dir-local-variable)))
  (define-key project-prefix-map "V" 'sergio/project-add-variable))
#+end_src

** Eglot
#+begin_src emacs-lisp
  (defun sergio/eglot-auto-format ()
    (interactive)
    (eglot-format-buffer))
#+end_src

#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :bind (:map eglot-mode-map
  	      ("C-c l r" . eglot-rename)
  	      ("C-c l a" . eglot-code-actions))
    :general (leader-def
  	      "l r" 'eglot-rename
  	      "l a" 'eglot-code-actions
  	      "l h" 'eldoc)
    :hook (eglot-managed-mode . (lambda () (add-hook 'after-save-hook 'sergio/eglot-auto-format nil t))))
#+end_src
* UI
** Modes
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq modus-themes-mode-line '(accented))
  (load-theme 'modus-operandi)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 120 :family "JetBrains Mono")

  (use-package org
    :config
    (set-face-attribute 'org-level-1 nil :height 2.0)
    (set-face-attribute 'org-level-2 nil :height 1.7)
    (set-face-attribute 'org-level-3 nil :height 1.4)
    (set-face-attribute 'org-level-4 nil :height 1.2)
    (set-face-attribute 'org-level-5 nil :height 1.0))
#+end_src

* Packages
** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :config (vertico-mode 1))
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :init
    (global-corfu-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    ;;(setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

** Cape
#+begin_src emacs-lisp
  (use-package cape
    :general (leader-def "c f" 'cape-file))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode 1))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :config
    (setq embark-quit-after-action nil)
    :bind 
    (:map minibuffer-mode-map
  	("C-." . embark-act))
    (:map evil-normal-state-map
  	("C-." . embark-act))
    (:map evil-insert-state-map
  	("C-." . embark-act))
    (:map evil-visual-state-map 
  	("C-." . embark-act))
    (:map evil-replace-state-map 
  	("C-." . embark-act))
   :general
   (leader-def
     "." 'embark-act))
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (evil-mode 1)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-want-fine-undo t)
    (evil-undo-system 'undo-redo)
    (evil-symbol-word-search t)
    :bind
    ("C-M-u" . universal-argument)
    (:map evil-insert-state-map
  	("C-g" . evil-normal-state))
    (:map evil-visual-state-map
  	("C-g" . evil-normal-state))
    (:map evil-replace-state-map
  	("C-g" . evil-normal-state)))
#+end_src

*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Evil surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (evil-surround-mode 1))
#+end_src

*** Evil multiedit
#+begin_src emacs-lisp
  (use-package evil-multiedit
    :config
    (evil-define-key '(insert normal visual) evil-multiedit-mode-map (kbd "RET") nil)
    ;; Make multiedit take casing into consideration
    (defun make-evil-multiedit-case-sensitive (fn &rest args)
      (let ((case-fold-search (not iedit-case-sensitive)))
        (apply fn args)))

    (advice-add #'evil-multiedit-match-and-next :around #'make-evil-multiedit-case-sensitive)

    (evil-global-set-key 'insert (kbd "M-d") 'evil-multiedit-match-and-next)
    (evil-global-set-key 'normal (kbd "M-d") 'evil-multiedit-match-and-next)
    (evil-global-set-key 'visual (kbd "M-d") 'evil-multiedit-match-and-next)
    (evil-global-set-key 'insert (kbd "M-D") 'evil-multiedit-match-and-prev)
    (evil-global-set-key 'normal (kbd "M-D") 'evil-multiedit-match-and-prev)
    (evil-global-set-key 'visual (kbd "M-D") 'evil-multiedit-match-and-prev)
    (evil-global-set-key 'insert (kbd "C-M-d") 'evil-multiedit-match-all)
    (evil-global-set-key 'normal (kbd "C-M-d") 'evil-multiedit-match-all)
    (evil-global-set-key 'visual (kbd "C-M-d") 'evil-multiedit-match-all)
    :custom
    (evil-multiedit-use-symbols t)
    (evil-multiedit-follow-matches t))
#+end_src

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :config
  (evilnc-default-hotkeys))
#+end_src

*** Completion fix
#+begin_src emacs-lisp
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package transient)
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x C-g" . magit-status)
    ("C-x g" . magit-status)
    :general
    (leader-def
      "g" 'magit-status))
#+end_src
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind
    ("C-x ," . consult-recent-file)
    ("C-s" . consult-line)
    ("C-x b" . consult-buffer)
    ("C-c r" . consult-ripgrep)
    ("C-c e t" . consult-theme)
    :general
    (leader-def
      "b" 'consult-buffer
      "," 'consult-recent-file
      "r" 'consult-ripgrep
      "e t" 'consult-theme))
#+end_src
** Terraform
#+begin_src emacs-lisp
      (use-package terraform-mode
        :mode ("\\.tf$" . terraform-mode)
        :bind )
#+end_src
** Yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook
    (eglot-managed-mode . yas-minor-mode))
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode 1))
#+end_src

* Safe variables
#+begin_src emacs-lisp
  (custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values '((eval add-hook 'after-save-hook 'org-babel-tangle))))
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle)
# End:
