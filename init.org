#+PROPERTY: header-args :tangle init.el :results none
#+STARTUP: content

* Early init
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

* Elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
    			      :ref nil :depth 1
    			      :files (:defaults "elpaca-test.el" (:exclude "extensions"))
    			      :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
    	(if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
    		 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
    						 ,@(when-let ((depth (plist-get order :depth)))
    						     (list (format "--depth=%d" depth) "--no-single-branch"))
    						 ,(plist-get order :repo) ,repo))))
    		 ((zerop (call-process "git" nil buffer t "checkout"
    				       (or (plist-get order :ref) "--"))))
    		 (emacs (concat invocation-directory invocation-name))
    		 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
    				       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
    		 ((require 'elpaca))
    		 ((elpaca-generate-autoloads "elpaca" repo)))
    	    (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    	  (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  ;; You could embed this code directly in the reicpe, I just abstracted it into a function.
  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                         elpaca--pre-built-steps elpaca-build-steps))
            (list '+elpaca-unload-seq 'elpaca--activate-package)))

  (elpaca `(seq :build ,(+elpaca-seq-build-steps)))

  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))
#+end_src

** Use package
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

* Basic config
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+end_src
* UI
** Modes
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq modus-themes-mode-line '(accented))
  (load-theme 'modus-operandi)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 120 :family "JetBrains Mono")

  (use-package org
    :config
    (set-face-attribute 'org-level-1 nil :height 2.0)
    (set-face-attribute 'org-level-2 nil :height 1.7)
    (set-face-attribute 'org-level-3 nil :height 1.4)
    (set-face-attribute 'org-level-4 nil :height 1.2)
    (set-face-attribute 'org-level-5 nil :height 1.0))
#+end_src

* Packages
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :config (vertico-mode 1))
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :config
    (global-corfu-mode 1)
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 1))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Cape
#+begin_src emacs-lisp
  (use-package cape)
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode 1))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind 
    (:map minibuffer-mode-map
  	("C-." . embark-act))
    (:map evil-normal-state-map
  	("C-." . embark-act))
    (:map evil-insert-state-map
  	("C-." . embark-act))
    (:map evil-visual-state-map 
  	("C-." . embark-act))
    (:map evil-replace-state-map 
  	("C-." . embark-act)))
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-want-fine-undo t)
    (evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    :bind
    ("C-M-u" . universal-argument)
    (:map evil-insert-state-map
  	("C-g" . evil-normal-state))
    (:map evil-visual-state-map
  	("C-g" . evil-normal-state))
    (:map evil-replace-state-map
  	("C-g" . evil-normal-state)))
#+end_src

*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package transient)
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x C-g" . magit-status)
    ("C-x g" . magit-status))
#+end_src
* Safe variables
#+begin_src emacs-lisp
  (custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values '((eval add-hook 'after-save-hook 'org-babel-tangle))))
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle)
# End:
